#!/usr/bin/env sh
#   xdg-open-simple xdg-open
#
#   Utility script to open a file or URI in the user's preferred application.
#
#   A fork of the original xdg-open (and xdg-mime) script from the xdg-utils v1.2.1.
#
#   Copyright 2024, Andis Sprinkis <andis@sprinkis.com>
#
#   xdg-open 1.2.1 copyright:
#
#   Copyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>
#   Copyright 2009-2016, Rex Dieter <rdieter@fedoraproject.org>
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   xdg-mime 1.2.1 copyright:
#
#   Copyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>
#   Copyright 2009-2010, Rex Dieter <rdieter@fedoraproject.org>
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.

script="$(basename "$0")"

help_info="NAME
    ${script} - opens a file or URI in the registered default application.

SYNOPSIS
    ${script} { file | URI } [-h]

DESCRIPTION
    Utility script to open a file or URI in the registered default application.

    { file | URI }
        The absolute path of the file, or the URI to open.

    -h
        Prints this message.

EXIT CODES
    An exit code of 0 indicates success, while a non-zero exit code indicates failure. The following failure codes can be returned:

    1
        Error in command line syntax.

    2
        One of the files passed on the command line did not exist.

    3
        A required tool could not be found.

    4
        The action failed.

    5
        No permission to read one of the files passed on the command line.

    In case of success the process launched from the .desktop file will not be forked off and therefore may result in xdg-open-generic running for a very long time. This behaviour intentionally differs from most desktop specific openers to allow terminal based applications to run using the same terminal xdg-open was called from.

SEE ALSO
    xdg-open(1), xdg-mime(1), MIME applications associations specification

EXAMPLES
    xdg-open \"http://www.freedesktop.org/\"
        Opens the freedesktop.org website in the user's default browser.

    xdg-open \"/tmp/foobar.png\"
        Opens the PNG image file /tmp/foobar.png in the user's default image viewing application.
"

IFS_="$IFS"

while getopts :h name; do
  case "$name" in
    "h")
      echo "$help_info"; exit
    ;;
    "?")
      echo "$help_info" 1>&2; exit "1"
    ;;
  esac
done

{ [ "$1" = "" ] || [ "$#" -gt "1" ]; } && { echo "$help_info" 1>&2; exit "1"; }

url="$1"

# The first_word, last_word functions handle backslashes, but not quote marks.

# shellcheck disable=SC2162
first_word() { read first rest; echo "$first"; }

# shellcheck disable=SC2162
last_word() { read first rest; echo "$rest"; }

# XDG directories
xdg_config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
xdg_config_dirs="${XDG_CONFIG_DIRS:-/etc/xdg}"
xdg_user_dir="${XDG_DATA_HOME:-$HOME/.local/share}"
xdg_system_dirs="${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}"

# Get INI-format-like file (.desktop, mimeapps.list) value by it's key in a specified [Group]
ini_get_val() {
  file="$1" key="$2" group="$3"

  is_tgt_group="0" result=""
  IFS=""
  while read -r line; do
    case "$line" in
      "[${group}]")
        is_tgt_group="1"
      ;;
      "["*)
        is_tgt_group="0"
      ;;
      "${key}="*)
        [ "$is_tgt_group" = "0" ] && continue
        result="$(echo "$line" | cut -d= -f 2-)"
        [ "$result" ] && break
      ;;
    esac
  done < "$file"
  IFS="$IFS_"

  [ "$result" ] && echo "$result"
}

# $1: Target file path, $2: Target file URI, $3: mimeapps.list dir, $4: MIME type
open() {
  target_fpath="$1" target_uri="$2" dir="$3" mime="$4"

  fpath_mimeapps="${dir}/mimeapps.list"

  [ -f "$fpath_mimeapps" ] || return

  ids="$(ini_get_val "$fpath_mimeapps" "$mime" "Default Applications")"

  [ "$ids" ] || return

  # $ids could be a ";" separated list of .desktop file IDs. Uses the first existant one.
  IFS=\;
  for id in $ids; do
    IFS="$IFS_"

    fpath_desktop="$(
      IFS=:
      for d in $xdg_user_dir $xdg_system_dirs; do
        IFS="$IFS_"

        [ -d "${d}/applications" ] || continue

        app="${id#*-}"
        [ "$id" = "$app" ] || {
          vendor="${id%-*}" fp="${d}/applications/${vendor}/${app}"
          [ -r "$fp" ] && { echo "$fp"; break; }
        }

        fp="${d}/applications/${id}"
        [ -r "$fp" ] && { echo "$fp"; break; }
      done
    )"

    [ "$fpath_desktop" ] || continue

    command="$(ini_get_val "$fpath_desktop" "Exec" "Desktop Entry" | first_word)"

    command -v "$command" > "/dev/null" || continue

    icon="$(ini_get_val "$fpath_desktop" "Icon" "Desktop Entry")"
    name="$(ini_get_val "$fpath_desktop" "Name" "Desktop Entry")"

    # shellcheck disable=SC2046
    set -- $(ini_get_val "$fpath_desktop" "Exec" "Desktop Entry" | last_word)

    # We need to replace any occurrence of "%f", "%F" and the like by the target file.
    # We examine each argument and append the modified argument to the end then shift.
    args="$#" replaced="0"
    while [ "$args" -gt "0" ]; do
      case $1 in
        %[c])
          replaced="1" arg="$name"
          shift
          set -- "$@" "$arg"
        ;;
        %[fF])
          # If there is only a target_url, this .desktop application can't handle the target.
          [ "$target_fpath" ] || continue "2"
          replaced="1" arg="$target_fpath"
          shift
          set -- "$@" "$arg"
        ;;
        %[uU])
          replaced="1"
          # When an URI is requested use it, otherwise fall back to the file path.
          arg="${target_uri:-$target_fpath}"
          shift
          set -- "$@" "$arg"
        ;;
        %[i])
          replaced="1"
          shift
          set -- "$@" "--icon" "$icon"
        ;;
        *)
          arg="$1"
          shift
          set -- "$@" "$arg"
        ;;
      esac
      args="$((args - 1))"
    done

    [ "$replaced" = "1" ] || set -- "$@" "${target_fpath:-$target_uri}"

    env "$command" "$@"

    exit "0"
  done
}

is_file_url="0" file="" scheme="" mime=""

[ "$url" = "${url#file://}" ] || is_file_url="1"
scheme="$(echo "$url" | LC_ALL="C" sed -n 's/\(^[[:alpha:]][[:alnum:]+\.-]*\):.*$/\1/p')"

if [ "$is_file_url" = "1" ] || [ -z "$scheme" ]; then
  file="$url"

  # Convert file URL to a percent-decoded path.
  [ "$is_file_url" = "1" ] && {
    file="${file#file://localhost}"
    file="${file#file://"$(uname -n)"}"
    file="${file#file://}"

    [ "$file" ] && {
      file="${file%%#*}"
      file="${file%%\?*}"
      file="$(echo "$file" | sed -e 's@%\([a-f0-9A-F]\{2\}\)@\\x\1@g')"
      file="$(printf "$file")"
    }
  }

  [ "$file" = "${file#-}" ] || file="./${file}"

  file="$(readlink -f "$file")"

  [ -e "$file" ] || exit "2"
  [ -r "$file" ] || exit "5"

  mime="$(file --brief --dereference --mime-type "$file" 2> "/dev/null" | cut -d\; -f1)"
else
  mime="${scheme:+"x-scheme-handler/${scheme}"}"
fi

case "$mime" in
  */*)
  ;;
  *)
    exit "3"
  ;;
esac

IFS=:
for dir in $xdg_config_home $xdg_config_dirs; do
  IFS="$IFS_"

  open "$file" "${scheme:+$url}" "$dir" "$mime"
done

IFS=:
for dir in $xdg_system_dirs; do
  IFS="$IFS_"

  open "$file" "${scheme:+$url}" "${dir}/applications" "$mime"
done

exit "3"
